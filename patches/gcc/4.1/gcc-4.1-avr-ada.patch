Index: gcc-4_1-branch/gcc/ada/gnatbind.adb
===================================================================
--- gcc-4_1-branch/gcc/ada/gnatbind.adb	
+++ gcc-4_1-branch/gcc/ada/gnatbind.adb	
@@ -332,6 +332,11 @@
          then
             Add_Lib_Search_Dir (Argv (4 .. Argv'Last));
 
+         --  -freestanding
+
+         elsif Argv (2 .. Argv'Last) = "freestanding" then
+            Opt.Freestanding := True;
+
          --  -nostdlib
 
          elsif Argv (2 .. Argv'Last) = "nostdlib" then
Index: gcc-4_1-branch/gcc/ada/make.adb
===================================================================
--- gcc-4_1-branch/gcc/ada/make.adb	
+++ gcc-4_1-branch/gcc/ada/make.adb	
@@ -4490,6 +4490,11 @@
                   --  Warn the user, if necessary, so that he is not surprized
                   --  that specific switches are not taken into account.
 
+                  if Opt.Verbose_Mode then
+                     Write_Str ("Init library build (RE1)");
+                     Write_Eol;
+                  end if;
+
                   declare
                      Defaults : constant Variable_Value :=
                        Prj.Util.Value_Of
@@ -5127,6 +5132,11 @@
                      end loop;
                   end;
 
+                  if Opt.Verbose_Mode then
+                     Write_Str ("build library build (RE2)");
+                     Write_Eol;
+                  end if;
+
                   --  Build the libraries, if any need to be built
 
                   for J in 1 .. Library_Projs.Last loop
Index: gcc-4_1-branch/gcc/ada/bindgen.adb
===================================================================
--- gcc-4_1-branch/gcc/ada/bindgen.adb	
+++ gcc-4_1-branch/gcc/ada/bindgen.adb	
@@ -1296,6 +1296,10 @@
             WBI ("      procedure Ada_Main_Program;");
          end if;
 
+         if Opt.Freestanding then
+            WBI ("      pragma No_Return (Ada_Main_Program);");
+         end if;
+
          Set_String ("      pragma Import (Ada, Ada_Main_Program, """);
          Get_Name_String (Units.Table (First_Unit_Entry).Uname);
          Set_Main_Program_Name;
@@ -1318,7 +1322,7 @@
       --  The reference stops Ada_Main_Program_Name from being optimized
       --  away by smart linkers, such as the AiX linker.
 
-      if Bind_Main_Program then
+      if Bind_Main_Program and then not Opt.Freestanding then
          WBI
            ("      Ensure_Reference : System.Address := " &
             "Ada_Main_Program_Name'Address;");
@@ -1375,7 +1379,9 @@
       WBI ("      " & Ada_Init_Name.all & ";");
 
       if not No_Main_Subprogram then
-         WBI ("      Break_Start;");
+         if not Opt.Freestanding then
+            WBI ("      Break_Start;");
+         end if;
 
          if ALIs.Table (ALIs.First).Main_Program = Proc then
             WBI ("      Ada_Main_Program;");
@@ -1991,7 +1997,7 @@
       --  to a symbol duplication during the link (for instance when a
       --  C program uses 2 Ada libraries)
 
-      if Bind_Main_Program then
+      if Bind_Main_Program and then not Opt.Freestanding then
          WBI ("");
          WBI ("   GNAT_Version : constant String :=");
          WBI ("                    ""GNAT Version: " &
@@ -2077,6 +2083,10 @@
             end if;
          end if;
 
+         if Opt.Freestanding then
+            WBI ("   pragma No_Return (" & Get_Main_Name & ");");
+         end if;
+
          WBI ("   pragma Export (C, " & Get_Main_Name & ", """ &
            Get_Main_Name & """);");
       end if;
@@ -2437,7 +2447,7 @@
    --  Start of processing for Gen_Versions_Ada
 
    begin
-      if Bind_For_Library then
+      if Bind_For_Library or else Opt.Freestanding then
 
          --  When building libraries, the version number of each unit can
          --  not be computed, since the binder does not know the full list
Index: gcc-4_1-branch/gcc/ada/opt.ads
===================================================================
--- gcc-4_1-branch/gcc/ada/opt.ads	
+++ gcc-4_1-branch/gcc/ada/opt.ads	
@@ -458,6 +458,13 @@
    --  GNATMAKE, GPRMAKE
    --  Set to force recompilations even when the objects are up-to-date.
 
+   Freestanding : Boolean := False;
+   --  GNATBIND
+   --  Set to True if no environment exists. This is typically the
+   --  case in embedded systems without an operating system. The main
+   --  program does not read command line parameters nor does it
+   --  return.
+
    Full_Path_Name_For_Brief_Errors : Boolean := False;
    --  GNAT, GNATMAKE, GNATCLEAN, GPRMAKE
    --  When True, in Brief_Output mode, each error message line
Index: gcc-4_1-branch/gcc/ada/mlib-tgt.adb
===================================================================
--- gcc-4_1-branch/gcc/ada/mlib-tgt.adb	
+++ gcc-4_1-branch/gcc/ada/mlib-tgt.adb	
@@ -3,11 +3,12 @@
 --                         GNAT COMPILER COMPONENTS                         --
 --                                                                          --
 --                             M L I B . T G T                              --
---                            (Default Version)                             --
+--                            (AVR Version)                                 --
 --                                                                          --
 --                                 B o d y                                  --
 --                                                                          --
 --                     Copyright (C) 2001-2005, AdaCore                     --
+--                     Copyright (C) 2001-2005, Rolf Ebert                  --
 --                                                                          --
 -- GNAT is free software;  you can  redistribute it  and/or modify it under --
 -- terms of the  GNU General Public License as published  by the Free Soft- --
@@ -25,10 +26,15 @@
 --                                                                          --
 ------------------------------------------------------------------------------
 
---  This is the default version which does not support libraries.
---  All subprograms are dummies, because they are never called,
---  except Support_For_Libraries which returns None.
+--  This package provides a set of target dependent routines to build
+--  static libraries.
 
+--  This is the AVR version of the body
+
+with MLib.Fil;
+with Namet;  use Namet;
+with Prj.Com;
+
 package body MLib.Tgt is
 
    ---------------------
@@ -37,7 +43,7 @@
 
    function Archive_Builder return String is
    begin
-      return "ar";
+      return "avr-ar";
    end Archive_Builder;
 
    -----------------------------
@@ -55,7 +61,7 @@
 
    function Archive_Ext return String is
    begin
-      return "";
+      return "a";
    end Archive_Ext;
 
    ---------------------
@@ -64,7 +70,7 @@
 
    function Archive_Indexer return String is
    begin
-      return "ranlib";
+      return "avr-ranlib";
    end Archive_Indexer;
 
    -----------------------------
@@ -143,9 +149,8 @@
    -------------------
 
    function Is_Object_Ext (Ext : String) return Boolean is
-      pragma Unreferenced (Ext);
    begin
-      return False;
+      return Ext = ".o";
    end Is_Object_Ext;
 
    --------------
@@ -153,9 +158,8 @@
    --------------
 
    function Is_C_Ext (Ext : String) return Boolean is
-      pragma Unreferenced (Ext);
    begin
-      return False;
+      return Ext = ".c";
    end Is_C_Ext;
 
    --------------------
@@ -163,9 +167,8 @@
    --------------------
 
    function Is_Archive_Ext (Ext : String) return Boolean is
-      pragma Unreferenced (Ext);
    begin
-      return False;
+      return Ext = ".a";
    end Is_Archive_Ext;
 
    -------------
@@ -184,10 +187,32 @@
    function Library_Exists_For
      (Project : Project_Id; In_Tree : Project_Tree_Ref) return Boolean
    is
-      pragma Unreferenced (Project);
-      pragma Unreferenced (In_Tree);
    begin
-      return False;
+      if not In_Tree.Projects.Table (Project).Library then
+         Prj.Com.Fail ("INTERNAL ERROR: Library_Exists_For called " &
+                         "for non library project");
+         return False; --  To avoid warning;
+
+      else
+         declare
+            Lib_Dir : constant String :=
+              Get_Name_String (In_Tree.Projects.Table (Project).Library_Dir);
+            Lib_Name : constant String :=
+              Get_Name_String (In_Tree.Projects.Table (Project).Library_Name);
+
+         begin
+            if In_Tree.Projects.Table (Project).Library_Kind = Static then
+               return Is_Regular_File
+                 (Lib_Dir & Directory_Separator & "lib" &
+                    Fil.Ext_To (Lib_Name, Archive_Ext));
+
+            else
+               return Is_Regular_File
+                 (Lib_Dir & Directory_Separator & "lib" &
+                    Fil.Ext_To (Lib_Name, DLL_Ext));
+            end if;
+         end;
+      end if;
    end Library_Exists_For;
 
    ---------------------------
@@ -198,10 +223,30 @@
      (Project : Project_Id;
       In_Tree : Project_Tree_Ref) return Name_Id
    is
-      pragma Unreferenced (Project);
-      pragma Unreferenced (In_Tree);
    begin
-      return No_Name;
+      if not In_Tree.Projects.Table (Project).Library then
+         Prj.Com.Fail ("INTERNAL ERROR: Library_File_Name_For called " &
+                         "for non library project");
+         return No_Name;
+
+      else
+         declare
+            Lib_Name : constant String :=
+              Get_Name_String (In_Tree.Projects.Table (Project).Library_Name);
+
+         begin
+            Name_Len := 3;
+            Name_Buffer (1 .. Name_Len) := "lib";
+
+            if In_Tree.Projects.Table (Project).Library_Kind = Static then
+               Add_Str_To_Name_Buffer (Fil.Ext_To (Lib_Name, Archive_Ext));
+
+            else
+               Add_Str_To_Name_Buffer (Fil.Ext_To (Lib_Name, DLL_Ext));
+            end if;
+            return Name_Find;
+         end;
+      end if;
    end Library_File_Name_For;
 
    ----------------
@@ -210,7 +255,7 @@
 
    function Object_Ext return String is
    begin
-      return "";
+      return "o";
    end Object_Ext;
 
    ----------------
@@ -237,7 +282,7 @@
 
    function Support_For_Libraries return Library_Support is
    begin
-      return None;
+      return Static_Only;
    end Support_For_Libraries;
 
 end MLib.Tgt;
